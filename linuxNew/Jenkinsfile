NODE_LABEL = "dockerBuild&&linux&&x64" // Dynamic docker machines from Azure

pipeline {
    agent {
        label NODE_LABEL
    }
    parameters {
        string(name: 'PRODUCT', defaultValue: 'temurin')
        string(name: 'JDK_SOURCE', defaultValue: 'Adoptium')
        string(name: 'VERSION', defaultValue: '11')
        booleanParam(name: 'UPLOAD', defaultValue: false, description: 'Tick this box to upload the deb/rpm files to Artifactory')
    }
    stages {
        stage('ppc64le Debian packages') {
            agent {
                label "dockerBuild&&linux&&x64"
            }
            tools {
                jdk "JDK11"
            }
            environment {
                DISTRO = "Debian"
            }
            steps {
                echo "Debian Installer Job for Temurin ${VERSION} - ${DISTRO} on ppc64le"
                setup()
                dir('linuxNew') {
                    buildNoTest()
                }
            }
        }
    }
}

def setup() {
    cleanWs()
    // Docker --mount option requires BuildKit
    env.DOCKER_BUILDKIT=1
    env.COMPOSE_DOCKER_CLI_BUILD=1
    env._JAVA_OPTIONS="-Xmx4g"
    checkout scm
}

def buildAndTest() {
    // Install Adoptium GPG key for RPM signing
    withCredentials([file(credentialsId: 'adoptium-artifactory-gpg-key', variable: 'GPG_KEY')]) {
        if (DISTRO != "Debian") {
            sh("./gradlew packageJdk${DISTRO} checkJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION} -PGPG_KEY=${GPG_KEY}")
        } else {
            sh("./gradlew packageJdk${DISTRO} checkJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION}")
        }
    }
    archiveArtifacts artifacts: '**/build/ospackage/*,**/build/reports/**,**/packageTest/dependencies/deb/*'
}

def buildNoTest() {
    sh("./gradlew packageJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION}")
    archiveArtifacts artifacts: '**/build/ospackage/*,**/build/reports/**,**/packageTest/dependencies/deb/*'
}

def uploadArtifacts(arch) {
    if (DISTRO == "Debian") {
        uploadDebArtifacts(arch)
    } else {
        uploadRPMArtifacts()
    }
}

def uploadDebArtifacts(arch) {
    rtUpload (
        serverId: 'adoptium.jfrog.io',
        failNoOp: true,
        spec: """{
            "files": [
                {
                "pattern": "**/build/ospackage/temurin-*${arch}.deb",
                "target": "deb/pool/main/t/temurin-${VERSION}/",
                "props": "deb.distribution=stretch;deb.distribution=buster;deb.distribution=bullseye;deb.distribution=xenial;deb.distribution=bionic;deb.distribution=focal;deb.distribution=groovy;deb.distribution=hirsute;deb.component=main;deb.architecture=${arch}"
                }
            ]
        }""",
    )
}

def uploadRPMArtifacts() {
    def distro = DISTRO.toLowerCase()
    def distro_Package = [
        'redhat' : [
            'rpm/centos/8',
            'rpm/centos/7',
            'rpm/fedora/33',
            'rpm/oraclelinux/8',
            'rpm/amazonlinux/2',
            'rpm/oraclelinux/7'
        ],
        'suse'   : [
            'rpm/opensuse/15.1',
            'rpm/opensuse/15.2'
        ]
    ]
    def archs = [
        "x86_64" : "x86_64",
        "ppc64le": "ppc64le",
	"aarch64": "aarch64",
        "source" : "src"
    ]
    def packageDirs = distro_Package.get(distro)
    
    if ( !VERSION.equals("8") ) {
        archs.put("s390x", "s390x")
    }

    packageDirs.each {
        packageDir -> 
            archs.each {
                entry -> rtUpload (
                    serverId: 'adoptium.jfrog.io',
                    failNoOp: true,
                    spec: """{
                        "files": [
                            {
                            "pattern": "**/build/ospackage/*.${entry.value}.rpm",
                            "target": "${packageDir}/${entry.key}/Packages/"
                            }
                        ]
                    }"""
               )
            }
    }
}
