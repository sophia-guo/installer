NODE_LABEL = "dockerBuild&&linux&&x64" // Dynamic docker machines from Azure

pipeline {
    agent {
        label NODE_LABEL
    }
    parameters {
        string(name: 'PRODUCT', defaultValue: 'temurin')
        string(name: 'JDK_SOURCE', defaultValue: 'Adoptium')
        choice(name: 'VERSION_FILTER', choices: ['8', '11', '17', 'all'], description: 'Build for specific VERSION')
        choice(name: 'DISTRO_FILTER', choices: ['all', 'Debian', 'RedHat', 'Suse'], description: 'Build for specific Distro')
        booleanParam(name: 'UPLOAD', defaultValue: false, description: 'Tick this box to upload the deb/rpm files to Artifactory')
    }
    stages {
        stage('Linux-x64 Installers') {
            matrix {
                agent {
                    label NODE_LABEL
                }
                tools {
                    jdk "jdk-11.0.13+8"
                }
                when {
                    allOf {
                        anyOf {
                            expression { params.VERSION_FILTER == 'all' }
                            expression { params.VERSION_FILTER == env.VERSION }
                        }
                        anyOf {
                            expression { params.DISTRO_FILTER == 'all' }
                            expression { params.DISTRO_FILTER == env.DISTRO }
                        }
                    }
                }
                axes {
                    axis {
                        name 'DISTRO'
                        values 'Debian', 'RedHat', 'Suse'
                    }
                    axis {
                        name 'VERSION'
                        values '8', '11', '17'
                    }
                }
                stages {
                    stage('Build Installer') {
                        steps {
                                echo "Installer Job for Temurin ${VERSION} - ${DISTRO}"
                                setup()
                                dir('linuxNew') {
                                    buildAndTest(DISTRO, 'x64')
                                }
                                script {
                                    if (UPLOAD.toBoolean()) {
                                        uploadArtifacts(DISTRO, 'amd64')
                                    }
                                }
                            }
                    }
                }
            }
        }
    }
}

def setup() {
    cleanWs()
    // Docker --mount option requires BuildKit
    env.DOCKER_BUILDKIT=1
    env.COMPOSE_DOCKER_CLI_BUILD=1
    env._JAVA_OPTIONS="-Xmx4g"
    checkout scm
}

def buildAndTest(DISTRO, arch) {
    if (DISTRO != "Debian") {
        // Install Adoptium GPG key for RPM signing
        withCredentials([file(credentialsId: 'adoptium-artifactory-gpg-key', variable: 'GPG_KEY')]) {
            sh("./gradlew packageJdk${DISTRO} checkJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION} -PGPG_KEY=${GPG_KEY}")
        }
    } else if (arch == 'x64') {
        sh("./gradlew packageJdk${DISTRO} checkJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION}")
    } else {
        // Current tests are not supported on non-x64 platform
        sh("./gradlew packageJdk${DISTRO} --parallel -PPRODUCT=${PRODUCT} -PPRODUCT_VERSION=${VERSION}")
    }
    archiveArtifacts artifacts: '**/build/ospackage/*,**/build/reports/**,**/packageTest/dependencies/deb/*'
}

def uploadArtifacts(distro, arch) {
    if (distro == "Debian") {
        uploadDebArtifacts(arch)
    } else {
        uploadRPMArtifacts(distro)
    }
}

def uploadDebArtifacts(buildArch) {
    def archs = [
        "amd64" : "amd64",
        "ppc64le": "ppc64el",
        "aarch64": "arm64",
        "armv7l": "armhf",
        "s390x" : "s390x"
    ]
    def arch = archs.get(buildArch)
    rtUpload (
        serverId: 'adoptium.jfrog.io',
        failNoOp: true,
        spec: """{
            "files": [
                {
                "pattern": "**/build/ospackage/temurin-*${arch}.deb",
                "target": "deb/pool/main/t/temurin-${VERSION}/",
                "props": "deb.distribution=stretch;deb.distribution=buster;deb.distribution=bullseye;deb.distribution=xenial;deb.distribution=bionic;deb.distribution=focal;deb.distribution=groovy;deb.distribution=hirsute;deb.component=main;deb.architecture=${arch}"
                }
            ]
        }""",
    )
}

def uploadRPMArtifacts(distro) {
    def tempDistro = distro.toLowerCase()
    def distro_Package = [
        'redhat' : [
            'rpm/fedora/34',
            'rpm/fedora/35'
        ],
        'suse'   : [
            'rpm/opensuse/15.1',
            'rpm/opensuse/15.2'
        ]
    ]
    def archs = [
        "x86_64" : "x86_64",
        "ppc64le": "ppc64le",
        "aarch64": "aarch64",
        "armv7hl": "armv7hl",
        "source" : "src"
    ]
    def packageDirs = distro_Package.get(tempDistro)
    
    if ( !VERSION.equals("8") ) {
        archs.put("s390x", "s390x")
    }

    packageDirs.each {
        packageDir -> 
            archs.each {
                entry -> rtUpload (
                    serverId: 'adoptium.jfrog.io',
                    failNoOp: true,
                    spec: """{
                        "files": [
                            {
                            "pattern": "**/build/ospackage/*.${entry.value}.rpm",
                            "target": "${packageDir}/${entry.key}/Packages/"
                            }
                        ]
                    }"""
               )
            }
    }
}
